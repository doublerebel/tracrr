// Generated by CoffeeScript 1.6.3
(function() {
  var Tracrr, _logCaughtExceptions, _maxFrames, _service;

  _logCaughtExceptions = true;

  _maxFrames = 12;

  _service = console || {
    log: function() {}
  };

  Tracrr = (function() {
    function Tracrr() {}

    Tracrr.setLogCaughtExceptions = function(logCaughtExceptions) {
      return _logCaughtExceptions = logCaughtExceptions;
    };

    Tracrr.setMaxFrames = function(maxFrames) {
      return _maxFrames = maxFrames;
    };

    Tracrr.logTo = function(service) {
      _service = service;
      if (!this.attached) {
        return this.attach();
      }
    };

    Tracrr.attached = false;

    Tracrr.attach = function() {
      if (this.Debug == null) {
        this.Debug = debug.Debug;
      }
      this.Debug.setListener(this.trace);
      this.Debug.debuggerFlags().breakOnCaughtException.setValue(true);
      return this.attached = true;
    };

    Tracrr.detach = function() {
      var _ref;
      if ((_ref = this.Debug) != null) {
        _ref.setListener(null);
      }
      this.Debug.debuggerFlags().breakOnCaughtException.setValue(false);
      return this.attached = false;
    };

    Tracrr.trace = function(event, exec_state, event_data, data) {
      var ex, exText, fname, fnc, frame, frames, sf, stackTrace, uc;
      if (!((event === this.Debug.DebugEvent.Exception) && (uc = event_data.uncaught()) || _logCaughtExceptions)) {
        return;
      }
      ex = {
        frameFuncName: exec_state.frame().func().name(),
        exception: event_data.exception(),
        script: exec_state.frame().func().script().name(),
        line: event_data.sourceLine() + 1,
        column: event_data.sourceColumn() + 1,
        text: event_data.sourceLineText(),
        caught: uc ? "Uncaught" : "Caught"
      };
      frames = exec_state.frameCount() - 1;
      if (frames > _maxFrames) {
        frames = _maxFrames;
      }
      stackTrace = (function() {
        var _i, _results;
        _results = [];
        for (frame = _i = 1; 1 <= frames ? _i <= frames : _i >= frames; frame = 1 <= frames ? ++_i : --_i) {
          sf = exec_state.frame(frame++);
          fnc = sf.func();
          fname = fnc.name();
          if (fname === "") {
            fname = fnc.inferredName();
          }
          _results.push("At " + fname + " in " + (fnc.script().name()) + "[" + (sf.sourceLine() + 1) + "," + (sf.sourceColumn() + 1) + "] " + (sf.sourceLineText()));
        }
        return _results;
      })();
      exText = "" + ex.caught + " Exception: " + ex.exception + "\nAt " + ex.frameFuncName + " in " + ex.script + "[" + ex.line + "," + ex.column + "] " + ex.text;
      exText += "\n" + stackTrace.join("\n");
      return _service.log(exText);
    };

    return Tracrr;

  })();

  module.exports = Tracrr;

}).call(this);
